type User @model
  @key(name: "usersByEmail", fields: ["email"], queryField: "usersByEmail") {
  id: ID!
  email: AWSEmail!
  username: String!
  first_name: String!
  last_name: String!
  dob: AWSDate
  location: String
  image_url: String @default(value: "https://i.pinimg.com/originals/ed/3b/ee/ed3beefd69c83e86241a31c001dd2f1a.png")
  avatar: S3Object
  pushToken: String
  events: [Event] @connection(keyName: "byUser", fields: ["id"])
  friendships: [Friendship] @connection(keyName: "byUser", fields: ["id"])
  friendRequests: [FriendRequest] @connection(keyName: "byUser", fields: ["id"])
}

type Event @model
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  name: String!
  start_datetime: String!
  end_datetime: String!
  image_url: String
  avatar: S3Object
  public: Boolean! @default(value: "false")
  description: String
  participants: [String]
  userID: ID!
  user: User! @connection(fields: ["userID"])
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type Friendship 
  @model(queries: null)
  @key (name: "byUser", fields: ["userID", "friendID"]) {
    id: ID!
    userID: ID!
    friendID: ID!
    user: User! @connection(fields: ["userID"])
  }

type FriendRequest
  @model(queries: null)
  @key (name: "byUser", fields: ["userID", "senderID"]) {
    id: ID!
    userID: ID!
    senderID: ID! #Sender of friend request
    user: User! @connection(fields: ["userID"]) #User receiving request
  }
